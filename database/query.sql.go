// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package database

import (
	"context"
)

const checkBreziniai = `-- name: CheckBreziniai :one
SELECT last_value, log_cnt, is_called FROM brezinys_id_seq
`

func (q *Queries) CheckBreziniai(ctx context.Context) (BrezinysIDSeq, error) {
	row := q.db.QueryRow(ctx, checkBreziniai)
	var i BrezinysIDSeq
	err := row.Scan(&i.LastValue, &i.LogCnt, &i.IsCalled)
	return i, err
}

const checkLeidimai = `-- name: CheckLeidimai :one
SELECT last_value, log_cnt, is_called FROM leidimas_id_seq
`

func (q *Queries) CheckLeidimai(ctx context.Context) (LeidimasIDSeq, error) {
	row := q.db.QueryRow(ctx, checkLeidimai)
	var i LeidimasIDSeq
	err := row.Scan(&i.LastValue, &i.LogCnt, &i.IsCalled)
	return i, err
}

const checkSutartys = `-- name: CheckSutartys :one
SELECT last_value, log_cnt, is_called FROM sutartis_id_seq
`

func (q *Queries) CheckSutartys(ctx context.Context) (SutartisIDSeq, error) {
	row := q.db.QueryRow(ctx, checkSutartys)
	var i SutartisIDSeq
	err := row.Scan(&i.LastValue, &i.LogCnt, &i.IsCalled)
	return i, err
}

const deleteBrezinys = `-- name: DeleteBrezinys :exec
DELETE FROM brezinys
WHERE id = $1
`

func (q *Queries) DeleteBrezinys(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteBrezinys, id)
	return err
}

const deleteLeidimai = `-- name: DeleteLeidimai :exec
DELETE FROM leidimas
WHERE fk_brezinys_id = $1
`

func (q *Queries) DeleteLeidimai(ctx context.Context, fkBrezinysID int32) error {
	_, err := q.db.Exec(ctx, deleteLeidimai, fkBrezinysID)
	return err
}

const deleteLeidimas = `-- name: DeleteLeidimas :exec
DELETE FROM leidimas
WHERE id = $1
`

func (q *Queries) DeleteLeidimas(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteLeidimas, id)
	return err
}

const deleteSutartis = `-- name: DeleteSutartis :exec
DELETE FROM sutartis
WHERE id = $1
`

func (q *Queries) DeleteSutartis(ctx context.Context, id int16) error {
	_, err := q.db.Exec(ctx, deleteSutartis, id)
	return err
}

const insertBrezinys = `-- name: InsertBrezinys :exec
INSERT INTO brezinys (
brezinys,
fk_sutartis_id
) VALUES (
$1, $2
)
`

type InsertBrezinysParams struct {
	Brezinys     string
	FkSutartisID int16
}

func (q *Queries) InsertBrezinys(ctx context.Context, arg InsertBrezinysParams) error {
	_, err := q.db.Exec(ctx, insertBrezinys, arg.Brezinys, arg.FkSutartisID)
	return err
}

const insertLeidimas = `-- name: InsertLeidimas :exec
INSERT INTO leidimas (
leidimas,
fk_brezinys_id
) VALUES (
$1, $2
)
`

type InsertLeidimasParams struct {
	Leidimas     string
	FkBrezinysID int32
}

func (q *Queries) InsertLeidimas(ctx context.Context, arg InsertLeidimasParams) error {
	_, err := q.db.Exec(ctx, insertLeidimas, arg.Leidimas, arg.FkBrezinysID)
	return err
}

const insertSutartis = `-- name: InsertSutartis :exec
INSERT INTO sutartis (
sutartis,
kaina
) VALUES (
$1, $2
)
`

type InsertSutartisParams struct {
	Sutartis string
	Kaina    string
}

func (q *Queries) InsertSutartis(ctx context.Context, arg InsertSutartisParams) error {
	_, err := q.db.Exec(ctx, insertSutartis, arg.Sutartis, arg.Kaina)
	return err
}

const selectBreziniai = `-- name: SelectBreziniai :many
SELECT id, brezinys, fk_sutartis_id FROM brezinys
`

func (q *Queries) SelectBreziniai(ctx context.Context) ([]Breziny, error) {
	rows, err := q.db.Query(ctx, selectBreziniai)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Breziny
	for rows.Next() {
		var i Breziny
		if err := rows.Scan(&i.ID, &i.Brezinys, &i.FkSutartisID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectBrezinys = `-- name: SelectBrezinys :one
SELECT id, brezinys, fk_sutartis_id FROM brezinys
WHERE id = $1 LIMIT 1
`

func (q *Queries) SelectBrezinys(ctx context.Context, id int32) (Breziny, error) {
	row := q.db.QueryRow(ctx, selectBrezinys, id)
	var i Breziny
	err := row.Scan(&i.ID, &i.Brezinys, &i.FkSutartisID)
	return i, err
}

const selectDeleteBreziniai = `-- name: SelectDeleteBreziniai :many
SELECT id, brezinys, fk_sutartis_id FROM brezinys
WHERE fk_sutartis_id = $1
`

func (q *Queries) SelectDeleteBreziniai(ctx context.Context, fkSutartisID int16) ([]Breziny, error) {
	rows, err := q.db.Query(ctx, selectDeleteBreziniai, fkSutartisID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Breziny
	for rows.Next() {
		var i Breziny
		if err := rows.Scan(&i.ID, &i.Brezinys, &i.FkSutartisID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectDeleteLeidimai = `-- name: SelectDeleteLeidimai :many
SELECT id, leidimas, fk_brezinys_id FROM leidimas
WHERE fk_brezinys_id = $1
`

func (q *Queries) SelectDeleteLeidimai(ctx context.Context, fkBrezinysID int32) ([]Leidima, error) {
	rows, err := q.db.Query(ctx, selectDeleteLeidimai, fkBrezinysID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Leidima
	for rows.Next() {
		var i Leidima
		if err := rows.Scan(&i.ID, &i.Leidimas, &i.FkBrezinysID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectLeidimai = `-- name: SelectLeidimai :many
SELECT id, leidimas, fk_brezinys_id FROM leidimas
`

func (q *Queries) SelectLeidimai(ctx context.Context) ([]Leidima, error) {
	rows, err := q.db.Query(ctx, selectLeidimai)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Leidima
	for rows.Next() {
		var i Leidima
		if err := rows.Scan(&i.ID, &i.Leidimas, &i.FkBrezinysID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectLeidimas = `-- name: SelectLeidimas :one
SELECT id, leidimas, fk_brezinys_id FROM leidimas
WHERE id = $1 LIMIT 1
`

func (q *Queries) SelectLeidimas(ctx context.Context, id int64) (Leidima, error) {
	row := q.db.QueryRow(ctx, selectLeidimas, id)
	var i Leidima
	err := row.Scan(&i.ID, &i.Leidimas, &i.FkBrezinysID)
	return i, err
}

const selectSutartis = `-- name: SelectSutartis :one
SELECT id, sutartis, kaina FROM sutartis
WHERE id = $1 LIMIT 1
`

func (q *Queries) SelectSutartis(ctx context.Context, id int16) (Sutarti, error) {
	row := q.db.QueryRow(ctx, selectSutartis, id)
	var i Sutarti
	err := row.Scan(&i.ID, &i.Sutartis, &i.Kaina)
	return i, err
}

const selectSutartys = `-- name: SelectSutartys :many
SELECT id, sutartis, kaina FROM sutartis
`

func (q *Queries) SelectSutartys(ctx context.Context) ([]Sutarti, error) {
	rows, err := q.db.Query(ctx, selectSutartys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sutarti
	for rows.Next() {
		var i Sutarti
		if err := rows.Scan(&i.ID, &i.Sutartis, &i.Kaina); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBrezinys = `-- name: UpdateBrezinys :exec
UPDATE brezinys SET
brezinys = $2,
fk_sutartis_id = $3
WHERE id = $1
`

type UpdateBrezinysParams struct {
	ID           int32
	Brezinys     string
	FkSutartisID int16
}

func (q *Queries) UpdateBrezinys(ctx context.Context, arg UpdateBrezinysParams) error {
	_, err := q.db.Exec(ctx, updateBrezinys, arg.ID, arg.Brezinys, arg.FkSutartisID)
	return err
}

const updateLeidimas = `-- name: UpdateLeidimas :exec
UPDATE leidimas SET
leidimas = $2,
fk_brezinys_id = $3
WHERE id = $1
`

type UpdateLeidimasParams struct {
	ID           int64
	Leidimas     string
	FkBrezinysID int32
}

func (q *Queries) UpdateLeidimas(ctx context.Context, arg UpdateLeidimasParams) error {
	_, err := q.db.Exec(ctx, updateLeidimas, arg.ID, arg.Leidimas, arg.FkBrezinysID)
	return err
}

const updateSutartis = `-- name: UpdateSutartis :exec
UPDATE sutartis SET
sutartis = $2,
kaina = $3
WHERE id = $1
`

type UpdateSutartisParams struct {
	ID       int16
	Sutartis string
	Kaina    string
}

func (q *Queries) UpdateSutartis(ctx context.Context, arg UpdateSutartisParams) error {
	_, err := q.db.Exec(ctx, updateSutartis, arg.ID, arg.Sutartis, arg.Kaina)
	return err
}
